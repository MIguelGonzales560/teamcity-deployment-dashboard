{"version":3,"sources":["components/Search.js","util/collections.js","util/versions.js","deploysProcessor.js","searchApps.js","util/dateTimes.js","Deployment.js","App.js","registerServiceWorker.js","sources/teamcityPlugin/teamCityPluginSource.js","configuration.js","index.js"],"names":["Search","filter","className","noValidate","type","placeholder","onkeypress","required","onChange","event","target","value","role","aria-label","xlinkHref","onClick","SearchIcons","xmlns","style","display","id","viewBox","d","fillRule","caseInsensitiveCompare","Intl","Collator","compare","maxVersion","versions","map","firstWord","reduce","acc","current","compareVersion","sentence","index","indexOf","end","length","slice","a","b","ver1","split","s","padStart","join","ver2","markLatestAppDeploy","deploysPerApp","Object","keys","app","deploys","deploy","version","latestVersion","markLatestVersion","latest","objectWith","object","key","defaultDateFormat","DateTimeFormat","day","month","year","defaultTimeFormat","hour","minute","second","dateFormatter","formatter","timeFormatter","isToday","dateTime","toDateString","Date","Deployment","environment","found","find","undefined","Build","href","link","statusClass","status","hanging","running","isoDateTime","dateFormat","timeFormat","date","format","dateTimes","time","StatusIcon","iconType","statusIconClass","rotateClass","ageClass","classes","icon","faClock","faCircleNotch","faCheckCircle","faExclamationCircle","faQuestionCircle","Title","embedded","Page","environments","unfilteredDeploysPerApp","useState","setFilter","useMemo","text","unfilteredReleasesPerApp","searchText","toLowerCase","filterApps","Deploys","DeployHeader","env","DeployRows","sort","DeployRow","App","configuration","source","setEnvironments","setDeploysPerApp","refreshSecs","setRefreshSecs","load","fetch","then","data","byKey","grouped","name","push","deploysProcessor","useEffect","setInterval","parseInt","clearInterval","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","fetchData","urlPrefix","projectId","search","url","headers","extractJson","URLSearchParams","get","Error","response","ok","json","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.09189dbe.chunk.js","sourcesContent":["import React from \"react\"\r\nimport './Search.css'\r\n\r\nexport const Search = ({filter}) => {\r\n  return (\r\n      <div className=\"search\">\r\n        <SearchIcons/>\r\n\r\n        <form noValidate=\"noValidate\" className=\"search-form\">\r\n          <input type=\"search\" placeholder=\"Deployment Search...\" onkeypress=\"return event.keyCode != 13;\" required=\"required\" className=\"search-input\"\r\n                 onChange={event => filter(event.target.value)}/>\r\n          <span className=\"search-submit\">\r\n          <svg role=\"img\" aria-label=\"Search\">\r\n            <use xlinkHref=\"#search-icon-magnifier\"/>\r\n          </svg>\r\n        </span>\r\n          <button type=\"reset\" className=\"search-reset\" onClick={() => filter(\"\")}>\r\n            <svg role=\"img\" aria-label=\"Reset\">\r\n              <use xlinkHref=\"#search-icon-cross\"/>\r\n            </svg>\r\n          </button>\r\n        </form>\r\n      </div>\r\n  )\r\n}\r\n\r\nconst SearchIcons = () => {\r\n  return (\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" style={{display: \"none\"}}>\r\n        <symbol xmlns=\"http://www.w3.org/2000/svg\" id=\"search-icon-magnifier\" viewBox=\"0 0 40 41\">\r\n          <path\r\n              d=\"M26.51 28.573c-2.803 2.34-6.412 3.748-10.35 3.748C7.236 32.32 0 25.087 0 16.16 0 7.236 7.235 0 16.16 0c8.926 0 16.16 7.235 16.16 16.16 0 4.213-1.61 8.048-4.25 10.925L40 39.015l-1.524 1.524L26.51 28.572zm-10.35 2.132c8.033 0 14.545-6.512 14.545-14.544S24.193 1.617 16.16 1.617 1.617 8.128 1.617 16.16c0 8.033 6.512 14.545 14.545 14.545z\"\r\n              fillRule=\"evenodd\"/>\r\n        </symbol>\r\n        <symbol xmlns=\"http://www.w3.org/2000/svg\" id=\"search-icon-cross\" viewBox=\"0 0 20 20\">\r\n          <path\r\n              d=\"M8.96 10L.52 1.562 0 1.042 1.04 0l.522.52L10 8.96 18.438.52l.52-.52L20 1.04l-.52.522L11.04 10l8.44 8.438.52.52L18.96 20l-.522-.52L10 11.04l-8.438 8.44-.52.52L0 18.96l.52-.522L8.96 10z\"\r\n              fillRule=\"evenodd\"/>\r\n        </symbol>\r\n      </svg>\r\n  )\r\n}\r\n","\r\nexport const groupBy = (array, byKey) => {\r\n  const reducer = (acc, current) => {\r\n    let key = byKey(current)\r\n    if (!acc[key]) {\r\n      acc[key] = []\r\n    }\r\n    acc[key].push(current)\r\n    return acc\r\n  }\r\n\r\n  return array.reduce(reducer, { })\r\n}\r\n\r\nexport const sort = (array) => {\r\n  return array.sort(caseInsensitiveCompare)\r\n}\r\n\r\nconst caseInsensitiveCompare = new Intl.Collator('default').compare\r\n","\r\n/*\r\n * Returns the lexicographically-latest version of the array specified.\r\n * Assumes the first word is the SemVer 2 version string to compare and return.\r\n * Ignores any subsequent words, assuming it is non-relevant data.\r\n */\r\nexport const maxVersion = versions => {\r\n  let firstWords = versions.map(firstWord)\r\n  return firstWords.reduce(\r\n      (acc, current) => compareVersion(acc, current) > 0 ? acc : current)\r\n}\r\n\r\nexport const firstWord = sentence => {\r\n  let index = sentence.indexOf(\" \")\r\n  let end = index === -1 ? sentence.length : index\r\n  return sentence.slice(0, end)\r\n}\r\n\r\nexport const compareVersion = (a, b) => {\r\n  // Hat tip: https://stackoverflow.com/a/47159772\r\n  let ver1 = a.split(/[.+]/).map(s => s.padStart(10, \"0\")).join('.')\r\n  let ver2 = b.split(/[.+]/).map(s => s.padStart(10, \"0\")).join('.')\r\n  return ver1 === ver2 ? 0 : (ver1 < ver2 ? -1 : 1)\r\n}\r\n","import {groupBy} from \"./util/collections\"\r\nimport {firstWord, maxVersion} from \"./util/versions\"\r\n\r\nexport const groupPerApp = deploys => {\r\n  let grouped = groupBy(deploys, deploy => deploy.name)\r\n  return markLatestAppDeploy(grouped)\r\n}\r\n\r\nexport const markLatestAppDeploy = deploysPerApp => {\r\n  let apps = Object.keys(deploysPerApp)\r\n  for (let app of apps) {\r\n    let deploys = deploysPerApp[app]\r\n    let versions = deploys.map(deploy => deploy.version)\r\n    let latestVersion = maxVersion(versions)\r\n\r\n    markLatestVersion(app, deploys, latestVersion)\r\n  }\r\n  return deploysPerApp\r\n}\r\n\r\nexport const markLatestVersion = (app, deploys, latestVersion) => {\r\n  for (let deploy of deploys) {\r\n    deploy.latest = firstWord(deploy.version) === latestVersion\r\n  }\r\n}\r\n","\r\nexport const filterApps = (text, unfilteredReleasesPerApp) => {\r\n  let searchText = text.toLowerCase()\r\n  let apps = Object.keys(unfilteredReleasesPerApp)\r\n  let appsFiltered = apps.filter(app => app.toLowerCase().indexOf(searchText) !== -1)\r\n\r\n  // noinspection UnnecessaryLocalVariableJS\r\n  let filteredReleasesPerApp = appsFiltered.reduce(\r\n      (acc, app) => objectWith(acc, app, unfilteredReleasesPerApp[app]),\r\n      { });\r\n  return filteredReleasesPerApp\r\n}\r\n\r\nexport const objectWith = (object, key, value) => {\r\n  object[key] = value\r\n  return object\r\n}\r\n","\r\n/* Default (non-test) formatting in user's locale. */\r\nconst defaultDateFormat = new Intl.DateTimeFormat(\r\n  'default', { day: \"numeric\", month: \"long\", year: \"numeric\" })\r\nconst defaultTimeFormat = new Intl.DateTimeFormat(\r\n  'default', { hour: 'numeric', minute: 'numeric', second: 'numeric' })\r\n\r\nexport const format = (isoDateTime, dateFormat, timeFormat) => {\r\n  let date = new Date(isoDateTime);\r\n  if (isToday(date)) {\r\n    return timeFormatter(dateFormat).format(date);\r\n  } else {\r\n    return dateFormatter(timeFormat).format(date)\r\n  }\r\n}\r\n\r\nconst dateFormatter = (formatter) => {\r\n  return formatter ? formatter : defaultDateFormat\r\n}\r\n\r\nconst timeFormatter = (formatter) => {\r\n  return formatter ? formatter : defaultTimeFormat\r\n}\r\n\r\nexport const isToday = dateTime => {\r\n  return dateTime.toDateString() === new Date().toDateString();\r\n}\r\n","import React from 'react';\r\nimport * as dateTimes from \"./util/dateTimes\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheckCircle, faCircleNotch, faExclamationCircle, faQuestionCircle, faClock} from \"@fortawesome/free-solid-svg-icons\";\r\nimport './Deployment.css'\r\n\r\nexport const Deployment = ({environment, deploys}) => {\r\n  let found = deploys.find(deploy => deploy.environment === environment)\r\n\r\n  if (found === undefined) {\r\n    return <td key={environment}/>\r\n  } else {\r\n    return <td key={environment}><Build deploy={found}/></td>\r\n  }\r\n}\r\n\r\nconst Build = ({deploy}) => (\r\n  <a href={deploy.link}>\r\n    <div className=\"build\">\r\n      <div className={`build-status ${statusClass(deploy.status, deploy.hanging)}`}>\r\n        <StatusIcon\r\n          status={deploy.status}\r\n          running={deploy.running}\r\n          hanging={deploy.hanging}\r\n          latest={deploy.latest}/>\r\n      </div>\r\n      <div className=\"build-info\">\r\n        <span className=\"build-version\">{deploy.version}</span>\r\n        <span className=\"build-time\">{dateTimes.format(deploy.time)}</span>\r\n      </div>\r\n    </div>\r\n  </a>\r\n)\r\n\r\nconst StatusIcon = ({status, running, hanging, latest}) => {\r\n  let iconType = statusIconClass(status, running, hanging)\r\n  let rotateClass = running && !hanging ? \"fa-spin\" : \"\"\r\n  let ageClass = latest ? \"status-latest\" : \"status-older\"\r\n  let classes = `status-icon ${statusClass(status, hanging)} ${rotateClass} ${ageClass}`\r\n\r\n  return <FontAwesomeIcon icon={iconType} className={classes}/>\r\n}\r\n\r\nconst statusClass = (status, hanging) => {\r\n  return `status-${hanging ? \"HANGING\" : status}`\r\n}\r\n\r\nconst statusIconClass = (status, running, hanging) => {\r\n  if (hanging) {\r\n    return faClock\r\n  } else if (running) {\r\n    return faCircleNotch\r\n  } else if (status === \"SUCCESS\") {\r\n    return faCheckCircle\r\n  } else if (status === \"FAILURE\") {\r\n    return faExclamationCircle\r\n  } else {\r\n    return faQuestionCircle\r\n  }\r\n}\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Search } from './components/Search'\r\nimport * as deploysProcessor from './deploysProcessor'\r\nimport './App.css'\r\nimport {filterApps} from \"./searchApps\"\r\nimport {sort} from \"./util/collections\"\r\nimport {Deployment} from \"./Deployment\";\r\n\r\nconst App = ({configuration}) => {\r\n\r\n  let source = configuration.source\r\n  let [environments, setEnvironments] = useState([])\r\n  let [deploysPerApp, setDeploysPerApp] = useState([])\r\n  let [refreshSecs, setRefreshSecs] = useState(\"\")\r\n\r\n  let load = () => source.fetch().then(data => {\r\n    let {environments, refreshSecs, deploys} = data\r\n\r\n    setEnvironments(environments)\r\n    setDeploysPerApp(deploysProcessor.groupPerApp(deploys))\r\n    setRefreshSecs(refreshSecs)\r\n  })\r\n\r\n  useEffect(() => {\r\n    load()\r\n  }, [source])\r\n\r\n  useEffect(() => {\r\n    if (refreshSecs) {\r\n      let id = setInterval(() => load(), parseInt(refreshSecs) * 1000)\r\n      return () => clearInterval(id)\r\n    }\r\n  }, [refreshSecs])\r\n\r\n  return (\r\n      <div>\r\n        <Title embedded={configuration.embedded}/>\r\n        <Page\r\n            environments={environments}\r\n            unfilteredDeploysPerApp={deploysPerApp}/>\r\n      </div>\r\n  )\r\n}\r\n\r\nconst Title = ({embedded}) =>\r\n    <h1 className={embedded ? \"invisible\" : \"visible\"}>Deployments</h1>\r\n\r\nconst Page = ({environments, unfilteredDeploysPerApp}) => {\r\n  let [filter, setFilter] = useState(\"\")\r\n  let deploysPerApp = useMemo(\r\n      () => filterApps(filter, unfilteredDeploysPerApp),\r\n      [filter, unfilteredDeploysPerApp])\r\n\r\n  return <>\r\n    <Search filter={setFilter}/>\r\n    <Deploys environments={environments} deploysPerApp={deploysPerApp}/>\r\n  </>\r\n}\r\n\r\nconst Deploys = ({environments, deploysPerApp}) => {\r\n  return (\r\n      <div className=\"list\">\r\n        <table style={{ '--environment-count': environments.length }}>\r\n          <thead>\r\n            <DeployHeader environments={environments}/>\r\n          </thead>\r\n          <tbody>\r\n            <DeployRows environments={environments} deploysPerApp={deploysPerApp}/>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n  )\r\n}\r\n\r\n/* Header + spacer column + environment columns */\r\nconst DeployHeader = ({environments}) => (\r\n  <tr>\r\n    <th>Deployment</th>\r\n    <th/>\r\n    {environments.map(env => <th key={env}>{env}</th>)}\r\n  </tr>\r\n)\r\n\r\nconst DeployRows = ({environments, deploysPerApp}) => {\r\n  let apps = useMemo(() => sort(Object.keys(deploysPerApp)), [deploysPerApp])\r\n\r\n  return apps.map(app =>\r\n      <DeployRow\r\n          key={app}\r\n          app={app}\r\n          environments={environments}\r\n          deploys={deploysPerApp[app]}/>\r\n  )\r\n}\r\n\r\n/* Header + spacer column + environment columns */\r\nconst DeployRow = ({app, environments, deploys}) => (\r\n  <tr>\r\n    <td>{app}</td>\r\n    <td/>\r\n    {environments.map(env =>\r\n        <Deployment key={env} environment={env} deploys={deploys}/>)}\r\n  </tr>\r\n)\r\n\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nexport const createTeamCityPluginSource = () => {\r\n  return {\r\n    fetch: () => fetchData(\"/app/deployment-dashboard/\")\r\n  }\r\n}\r\n\r\nconst fetchData = urlPrefix => {\r\n  let id = projectId(window.location.search)\r\n  let url = `${urlPrefix}/${id}`\r\n\r\n  console.log(`Fetching '${id}' deployments from TeamCity...`)\r\n\r\n  return fetch(url, {\r\n        headers: {\r\n          'Accept': 'application/json'\r\n        }\r\n      })\r\n      .then(extractJson)\r\n}\r\n\r\nexport const projectId = (search) => {\r\n  let params = new URLSearchParams(search)\r\n  let id = params.get(\"projectId\")\r\n  if (id === null) {\r\n    throw new Error(`Could not find project id in: ${search}`)\r\n  } else {\r\n    return id\r\n  }\r\n}\r\n\r\nexport const extractJson = response => {\r\n  if (response.ok) {\r\n    return response.json()\r\n  } else {\r\n    throw new Error('Could not fetch from URL')\r\n  }\r\n}\r\n","import {createTeamCityPluginSource} from \"./sources/teamcityPlugin/teamCityPluginSource\"\r\n// import {createMemorySource} from \"./sources/memory/memorySource\"\r\n\r\nconst configuration = {\r\n\r\n  // Running options (with appropriate imports):\r\n  //   testing: createMemorySource()\r\n  //   running outside of TeamCity: createTeamCityRestSource(\"http://localhost:8111\")\r\n  //   running as a TeamCity plugin: createTeamCityPluginSource()\r\n  source: createTeamCityPluginSource(),\r\n  // source: createMemorySource(),\r\n\r\n  // Indicates whether the app is embedded into TeamCity where some things are turned off\r\n  embedded: true,\r\n\r\n}\r\n\r\nexport default configuration\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport configuration from './configuration'\r\n\r\nReactDOM.render(\r\n    <App configuration={configuration}/>,\r\n    document.getElementById('deploys'));\r\n\r\nif (!configuration.embedded) {\r\n  registerServiceWorker();\r\n}\r\n"],"sourceRoot":""}